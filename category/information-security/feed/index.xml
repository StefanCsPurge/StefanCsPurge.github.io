<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Information security &#8211; M. Ștefan Cristian</title>
	<atom:link href="/category/information-security/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Technology &#38; Information Security Enthusiast</description>
	<lastBuildDate>Wed, 15 Dec 2021 19:16:29 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.1</generator>

<image>
	<url>/wp-content/uploads/2021/10/icon.png</url>
	<title>Information security &#8211; M. Ștefan Cristian</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>UNbreakable CTF 2021 S2 (teams) Writeups</title>
		<link>/2021/12/15/unbreakable-ctf-2021-s2-teams-writeups/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Wed, 15 Dec 2021 19:10:03 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<guid isPermaLink="false">/?p=287</guid>

					<description><![CDATA[These are the writeups for the mentioned&#160;CTF&#160;contest I participated in, this time as part of a team (representing the Babeș-Bolyai<p><a href="/2021/12/15/unbreakable-ctf-2021-s2-teams-writeups/" class="more-link">Continue reading<span class="screen-reader-text">UNbreakable CTF 2021 S2 (teams) Writeups</span></a></p>]]></description>
										<content:encoded><![CDATA[
<p>These are the writeups for the mentioned&nbsp;<a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)" target="_blank">CTF</a>&nbsp;contest I participated in, this time as part of a team (representing the Babeș-Bolyai University).</p>



<p><strong>Team </strong>&#8216;The Few Chosen&#8217;: <strong>Noria, D. Toma, Spurge</strong><br><strong>Won: 3rd place</strong><br>National ranks: <a href="https://unr21s2-echipe.cyberedu.ro/#ranks"></a><a href="https://unr21s2-echipe.cyberedu.ro/#ranks">https://unr21s2-echipe.cyberedu.ro/#ranks</a></p>



<iframe loading="lazy" width="1999" height="1200" src="https://drive.google.com/file/d/1yexnw4BhZzqXyl4zrHpxOIOewu9hSv-I/preview" allow="autoplay"></iframe>



<hr class="wp-block-separator is-style-wide"/>



<p>These writeups can also be found <a rel="noreferrer noopener" href="https://glacier-acrylic-3f2.notion.site/Unbreakable-2021-S2-teams-Writeups-e9816332d33a48db99b1f30f9029c559" data-type="URL" data-id="https://glacier-acrylic-3f2.notion.site/Unbreakable-2021-S2-teams-Writeups-e9816332d33a48db99b1f30f9029c559" target="_blank">here</a>.</p>



<hr class="wp-block-separator is-style-wide"/>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="724" src="/wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560-1024x724.png" alt="" class="wp-image-296" srcset="/wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560-1024x724.png 1024w, /wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560-300x212.png 300w, /wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560-768x543.png 768w, /wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560-1536x1086.png 1536w, /wp-content/uploads/2021/12/ae444f90-9c60-11eb-b4a2-87f5b1a33560.png 2000w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>UNbreakable CTF 2021 S2 (individual) Writeups</title>
		<link>/2021/12/07/unbreakable-ctf-2021-s2-individual-writeups/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Tue, 07 Dec 2021 17:37:47 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<guid isPermaLink="false">/?p=255</guid>

					<description><![CDATA[These are my writeups for the mentioned CTF contest I participated in. The national ranks can be found here: unr21s2-individual.cyberedu.ro/#ranks<p><a href="/2021/12/07/unbreakable-ctf-2021-s2-individual-writeups/" class="more-link">Continue reading<span class="screen-reader-text">UNbreakable CTF 2021 S2 (individual) Writeups</span></a></p>]]></description>
										<content:encoded><![CDATA[
<p class="has-text-align-center">These are my writeups for the mentioned <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)" data-type="URL" data-id="https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)" target="_blank">CTF</a> contest I participated in. The national ranks can be found here: <a rel="noreferrer noopener" href="https://unr21s2-individual.cyberedu.ro/#ranks" data-type="URL" data-id="https://unr21s2-individual.cyberedu.ro/#ranks" target="_blank">unr21s2-individual.cyberedu.ro/#ranks</a> . GG everyone.</p>



<p>Writeup link <a href="https://docs.google.com/document/d/e/2PACX-1vSokc2FONQGzGGLFC5qWCJMHjT0mKignuCtUhwBy8ZKUjS04vCsuH9DI1OJFI0nlCND0a8T-mGsIEd5/pub" data-type="URL" data-id="https://docs.google.com/document/d/e/2PACX-1vSokc2FONQGzGGLFC5qWCJMHjT0mKignuCtUhwBy8ZKUjS04vCsuH9DI1OJFI0nlCND0a8T-mGsIEd5/pub" target="_blank" rel="noreferrer noopener">here</a>.</p>



<iframe loading="lazy" width="1999" height="31500" src="https://docs.google.com/document/d/e/2PACX-1vSokc2FONQGzGGLFC5qWCJMHjT0mKignuCtUhwBy8ZKUjS04vCsuH9DI1OJFI0nlCND0a8T-mGsIEd5/pub?embedded=true">
</iframe>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How malware misbehaves &#038; how to punish it</title>
		<link>/2021/10/13/how-malware-misbehaves-how-to-punish-it/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Wed, 13 Oct 2021 10:29:52 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<category><![CDATA[#malware]]></category>
		<category><![CDATA[#malwaredetection]]></category>
		<guid isPermaLink="false">/?p=160</guid>

					<description><![CDATA[In this world of ever evolving malware, its behavior and the methods used to fight against it become essential knowledge<p><a href="/2021/10/13/how-malware-misbehaves-how-to-punish-it/" class="more-link">Continue reading<span class="screen-reader-text">How malware misbehaves &#038; how to punish it</span></a></p>]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover has-background-dim-60 has-background-dim"><img loading="lazy" width="2560" height="1924" class="wp-block-cover__image-background wp-image-161" alt="" src="/wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-scaled.jpg" style="object-position:28% 20%" data-object-fit="cover" data-object-position="28% 20%" srcset="/wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-scaled.jpg 2560w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-300x226.jpg 300w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-1024x770.jpg 1024w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-768x577.jpg 768w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-1536x1155.jpg 1536w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-2048x1540.jpg 2048w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-440x330.jpg 440w, /wp-content/uploads/2021/10/michael-dziedzic-0W4XLGITrHg-unsplash-920x690.jpg 920w" sizes="(max-width: 2560px) 100vw, 2560px" /><div class="wp-block-cover__inner-container">
<p class="has-text-align-center has-red-color has-text-color has-normal-font-size"><code><strong>let's play a game of cat and mouse</strong></code></p>
</div></div>



<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-text-align-center">In this world of ever evolving <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Malware" data-type="URL" data-id="https://en.wikipedia.org/wiki/Malware" target="_blank">malware</a>, its <strong>behavior</strong> and the <strong>methods used to fight</strong> against it become <strong>essential knowledge</strong> for anyone involved in the IT industry. This article aims to shine a light on the aspects stated above, in order to help computer users stay safe and to stimulate the development of <strong>better</strong> <strong>security solutions</strong>. </p>



<p><em>Shall we ?</em> . . .</p>



<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">I.</span> OS <span style="color:#149414" class="has-inline-color">processes</span>: why are they so important?</p>



<ul><li>when a file is executed, it becomes a process among the other already existing ones</li><li>processes have loaded modules (DLLs) and threads</li><li>each process can write into the virtual memory of another process (<span style="color:#149414" class="has-inline-color">code injection</span>)</li><li>many malicious entities use clean processes (e.g. cmd.exe, regedit.exe, explorer.exe) to execute their<span style="color:#149414" class="has-inline-color"> payloads</span> </li><li>they are directly used by the malware detection solutions</li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">II.</span> Which are the malware <span style="color:#149414" class="has-inline-color">detection</span> methods?</p>



<div class="wp-duotone-621d5f804fa5d wp-block-image"><figure class="alignleft size-large is-resized"><img loading="lazy" src="/wp-content/uploads/2021/10/proactivity-edited.png" alt="" class="wp-image-166" width="1069" height="234" srcset="/wp-content/uploads/2021/10/proactivity-edited.png 1254w, /wp-content/uploads/2021/10/proactivity-edited-300x66.png 300w, /wp-content/uploads/2021/10/proactivity-edited-1024x225.png 1024w, /wp-content/uploads/2021/10/proactivity-edited-768x168.png 768w" sizes="(max-width: 1069px) 100vw, 1069px" /></figure></div>



<div style="height:8px" aria-hidden="true" class="wp-block-spacer"></div>



<div class="wp-block-columns">
<div class="wp-block-column">
<ul><li>source detection and static detection are usually considered deprecated because they need a training set of already known malware =&gt; problems in detecting samples with novel behavior / might misclassify them</li><li>static analysis may be easily evaded through code obfuscation or by encrypting the executable file</li><li>emulation detection refers to the complete execution of the sample in a controlled environment (to monitor and record actions) =&gt; unsuitable for <span style="color:#149414" class="has-inline-color">real-time protection</span>.</li><li>some malware samples are able to detect they are executed in a controlled environment, so they alter their actions to appear harmless or manifest decoy behavior =&gt; emulation is susceptible to<span style="color:#149414" class="has-inline-color"> evasion</span></li><li>security solutions should be both <span style="color:#149414" class="has-inline-color">proactive</span> (prevent malware incidents) and <span style="color:#149414" class="has-inline-color">reactive</span> (detection for new malicious behavior can be added ASAP)</li></ul>
</div>



<div class="wp-block-column" style="flex-basis:280px">
<figure class="wp-block-table aligncenter"><table><tbody><tr><td class="has-text-align-center" data-align="center">=&gt; focus on <span style="color:#149414" class="has-inline-color">dynamic detection</span> &#8211; i.e.  monitor the behavior / actions of processes dynamically, at run-time</td></tr></tbody></table></figure>
</div>
</div>



<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">III.</span> Which are the <span style="color:#149414" class="has-inline-color">challenges</span> and <span style="color:#149414" class="has-inline-color">goals</span> of solutions based on dynamic detection?</p>



<ul><li>a single action performed by a process is usually insufficient to distinguish between malware and legit applications</li><li>advanced malware can avoid detection by separating malicious actions into<span style="color:#149414" class="has-inline-color"> multiple processes</span> through process creation or code injection =&gt; necessity to monitor malicious groups of processes at once instead of individual ones.</li><li>system<span style="color:#149414" class="has-inline-color"> remediation</span> after detection: find which process created / handled the malicious files, check if those files were executed, if the process compromised other processes, or if any registry changes were made =&gt; in the end, everything should be reverted </li><li>definitive <strong><span style="color:#149414" class="has-inline-color">goal</span></strong>: classify processes as <strong>clean</strong> (Negative) or <strong>infected</strong> (Positive). The result can be:<ul><li><span style="color:#149414" class="has-inline-color">True Positive</span> (<span style="color:#149414" class="has-inline-color">TP</span>) &#8211; the entity was correctly classified as malicious</li><li><span style="color:#149414" class="has-inline-color">True Negative</span> (<span style="color:#149414" class="has-inline-color">TN</span>) &#8211; the entity was correctly classified as clean</li><li><span class="has-inline-color has-red-color">False Positive</span> (<span class="has-inline-color has-red-color">FP</span>) &#8211; the entity was erroneously identified as malicious (false alarm)</li><li><span class="has-inline-color has-red-color">False Negative</span> (<span class="has-inline-color has-red-color">FN</span>) &#8211; the entity was erroneously identified as clean </li></ul></li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">IV.</span> But what do we need for <span style="color:#149414" class="has-inline-color">dynamic</span> detection?</p>



<ul><li><span style="color:#149414" class="has-inline-color">heuristics</span> &#8211; each heuristic is an algorithm (function) that analyzes the actions intercepted through monitoring; in case of any peculiar action identified, the heuristic triggers an alert which is passed to an evaluation engine</li><li><span style="color:#149414" class="has-inline-color">interception mechanisms</span> of the OS (for file system, processes, API etc., which entail complex components &#8211; drivers, DLLs) that provide the actions to the heuristics &#8211; we&#8217;ll focus on Windows here, as this is the most targeted OS</li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">V.</span> Which are the <span style="color:#149414" class="has-inline-color">interception</span> (filtering) mechanisms of the Windows OS? </p>



<ul><li><strong><span style="color:#87ceeb" class="has-inline-color">File System Filtering</span></strong> &#8211; uses file system drivers, kernel-mode components that can monitor / modify / prevent file system operations. They are of 2 types:<ul><li>Legacy &#8211; problematic, they must handle every type of I/O operation that a file system driver performs</li><li><strong><span style="color:#87ceeb" class="has-inline-color"><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts" data-type="URL" data-id="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts" target="_blank" rel="noreferrer noopener">Minifilter drivers</a></span></strong> &#8211; more reliable, performant and with a simplified development process. They can choose which file system operations to monitor and can register pre-operation and post-operation callback routines that are called by the OS each time the monitored operations are performed.</li></ul></li><li><strong><span style="color:#87ceeb" class="has-inline-color">Process Filtering</span></strong> &#8211; a <em>minifilter</em> driver can also be used to monitor the creation and termination of processes. It can call <em>PsSetCreateProcessNotifyRoutineEx </em>API to register a callback routine. Whenever a new process is created, the registered routine is called before the initial thread of the process begins running. The routine can also terminate the process.</li><li><strong><span style="color:#87ceeb" class="has-inline-color">Registry Filtering</span></strong> &#8211; a <em>minifilter</em> driver can also be notified whenever an operation that targets the registry is performed by registering a callback routine using the <em>CmRegisterCallbackEx</em> API. It is called before and after the registry operation is completed and receives specific info about that operation as parameters. <br>By writing in registry keys like:<br><em>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</em> , or<br><em>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</em> , <br>the malware ensures that it will run at log-on, gaining persistence. </li><li><strong><span style="color:#87ceeb" class="has-inline-color">WIN API Hooking</span></strong> &#8211; intercept API calls by redirecting their execution to an associated routine, called <em><span style="color:#149414" class="has-inline-color">hook</span></em>, to analyze / extract info about the call (parameters or return value) => the process calls a hooked API. Methods:<ul><li><strong>Import Address Table (IAT) Hooking</strong> &#8211; the destination addresses of the functions that are statically imported by the process are altered so that they point to the hook functions</li><li><strong>In-Line Hooking</strong> &#8211; alter the instructions of the functions to be intercepted, in memory, at run-time, by changing the first several bytes (to transfer the execution to the associated hook routine). When the routine completes processing, control is transferred back to the original API (change the first several bytes back or invoke a function that contains those bytes &#8211; called Trampoline).</li><li><strong>Detours</strong> &#8211; the Detours library is provided by Microsoft to intercept functions similar to in-line hooking, by applying code dynamically at run-time. The detour function can be used to replace the hooked function or extend its functionality.</li></ul></li><li><strong><span style="color:#87ceeb" class="has-inline-color">Event Tracing for Windows (ETW)</span></strong> &#8211; allows the interception of system events generated by the Windows OS in real time. As ETW is a <strong><span style="color:#149414" class="has-inline-color">kernel</span>-level feature,</strong> it is not susceptible to some type of evasion that affects WIN API Hooking, such as <em>hook removal</em>, or <em>direct syscall usage</em>. It can also avoid application crashes caused by API hooking.<br><strong>Disadvantage</strong>: code injection and other memory manipulation actions cannot be reliably identified without the <em>Microsoft-Windows-Threat-Intelligence</em> provider, that was included in Windows 10.</li><li><strong><span style="color:#87ceeb" class="has-inline-color">Anti-Malware Scan Interface (AMSI)</span></strong> &#8211; feature included in Windows 10 that contributes to real-time malware detection. Apps can use it to invoke the security solution available on the system to analyze various objects (files, memory areas, streams, URLs, IPs, etc.). It&#8217;s especially useful in detecting malicious scripts that can be highly obfuscated / difficult to detect. The Windows 10 script hosts (<em>PowerShell / Windows Script Host / JavaScript engine</em>) integrate AMSI and invoke scans of the code, which must be and is de-obfuscated right before execution.</li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">VI.</span> Which are the <span style="color:#149414" class="has-inline-color">common actions</span> performed by malware?</p>



<div class="wp-block-columns">
<div class="wp-block-column" style="flex-basis:66.66%">
<ul><li>creating a<strong> copy</strong> of the original file &#8211; allows the malware to ensure persistence</li><li><strong>hiding</strong> a file &#8211; ensures the malicious file is less likely to be noticed by the user</li><li><strong>injecting code</strong> into another process &#8211; allows execution of code in the context of a process that is known to be clean (usually belonging to the OS)</li><li><strong>creating startup registry key </strong>&#8211; to ensure persistence after system restart</li><li><strong>disabling some critical OS functionalities</strong> (e.g., updates) or<strong> terminating critical processes</strong> &#8211; to keep the OS vulnerable</li></ul>



<p class="has-small-font-size"><code>E.g. 2, <span class="has-inline-color has-red-color">backdoor trojan</span>: it usually connects to a malicious command and control server, from which it waits further instructions and can execute other payloads.</code></p>
</div>



<div class="wp-block-column has-background" style="background-color:#1b0505;flex-basis:33.33%">
<p></p>



<p class="has-text-align-center" style="font-size:19px"><code>E.g. 1, <span class="has-inline-color has-red-color">ransomware</span> actions:</code></p>



<p class="has-text-align-center" style="font-size:19px"><code><strong><span class="has-inline-color has-red-color">1.</span></strong> drop a copy of itself on the  disk<br><strong><span class="has-inline-color has-red-color">2.</span></strong> launch a copy of itself<br><strong><span class="has-inline-color has-red-color">3.</span></strong> delete backup (shadow) files<br><strong><span class="has-inline-color has-red-color">4.</span></strong> inject code into another process <br><strong><span class="has-inline-color has-red-color">5.</span></strong> enumerate and encrypt files <br><strong><span class="has-inline-color has-red-color">6.</span></strong> display message to the user to demand ransom for the encrypted data</code></p>
</div>
</div>



<p>There are 3 actions, very common in malware, that are especially encountered in <strong>installers</strong> &amp; <strong>uninstallers</strong> ( =&gt; risk of False Positives): <span style="color:#149414" class="has-inline-color">writing executable files in the System / Windows / Temporary folders</span>, <span style="color:#149414" class="has-inline-color">executing the created files</span> and <span style="color:#149414" class="has-inline-color">registering an executable to run at start-up</span> =&gt; there&#8217;s a need to distinguish between ordinary executable files and installers/uninstallers. Legit installers are usually generated by common software installation packages, and can be identified by scanning the file for certain <strong>signatures</strong>.</p>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">VII.</span> How to smartly <span style="color:#149414" class="has-inline-color">evaluate</span> the intercepted actions?</p>



<p>A generic approach is using a <strong><span style="color:#149414" class="has-inline-color"><em>scoring engine</em></span></strong>, which contains heuristics able to detect samples that use various new combinations of malicious actions. A set of predefined features are extracted (from the executable file or based on the actions of the analyzed process). Each feature has an associated <strong><span style="color:#149414" class="has-inline-color">score</span></strong>, that is used to compute a general score for the sample. If that score exceeds a predefined <span style="color:#149414" class="has-inline-color">threshold</span>, the sample is either categorized as a certain type of malware or as clean.</p>



<p class="has-eighty-black-background-color has-background">When thinking of complex malware scoring mechanisms, one may believe that the solution can be implemented using <span style="color:#149414" class="has-inline-color">artificial intelligence</span> (<span style="color:#149414" class="has-inline-color"><strong>AI</strong></span>). An AI algorithm performs well enough in face recognition, for example, because human faces do not change their definitory characteristics over time. But <span style="color:#149414" class="has-inline-color">malware evolves at a rapid pace</span>, to use the latest features provided by operating systems and programming languages, as well as <span style="color:#149414" class="has-inline-color">to exploit the latest unpatched</span> ( <strong><span style="color:#e10600" class="has-inline-color">zero-day</span></strong> ) <span style="color:#149414" class="has-inline-color">vulnerabilities</span>. Therefore, the scoring engine must be easy to understand and maintain, precise, predictable to changes, and needs to be <span style="color:#149414" class="has-inline-color">updated very quickly</span>. This is NOT easily achieved with an AI algorithm, where the training is time consuming and the results cannot be anticipated, not to mention the constantly required <strong>re</strong>-training. Also, adding a new heuristic may damage the entire scoring mechanism. Furthermore, an <span style="color:#149414" class="has-inline-color">appropriate training set for dynamic malware detection is almost impossible to find</span>.</p>



<p>In <span style="color:#149414" class="has-inline-color">practice</span>, adapting the scoring engine to a new threat should require writing a couple of heuristics and calibrating the scores and weights only for them. More exactly, when another malware technique appears in the wild, a security researcher needs to test the security solution against samples or <span style="color:#149414" class="has-inline-color">proof of concepts</span> (POCs) that exhibit the new behavior. He / She may also <span style="color:#149414" class="has-inline-color">manually</span> capture the behavior of the processes by simply using a tool like <strong><em><span style="color:#149414" class="has-inline-color"><a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon" data-type="URL" data-id="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon" target="_blank">Process Monitor</a></span></em></strong>. If the current detection model does not identify the new malicious technique, it&#8217;s a clear sign that the current model must be extended.</p>



<p>In a broader perspective, such a solution should be integrated in a modern security application, together with other components such as URL blocking, firewall, classic AV signatures, etc.</p>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">VIII.</span> Now, which are the <span style="color:#149414" class="has-inline-color">smart tricks</span> used to stay under the radar?</p>



<ul><li>solutions that use <span style="color:#149414" class="has-inline-color">dependency graphs</span> constructed from API / system calls, may be evaded by replacing a call sequence with its semantic equivalent and/or inserting redundant calls</li><li>instead of executing all the malicious actions in a single process, <strong><span style="color:#149414" class="has-inline-color">distribute</span></strong> the payload to multiple, distinct processes, to be executed over a long period of time. <span class="has-inline-color has-white-color"> </span>Because behavior-based detection cannot identify a process based on a single action (due to the risk of False Positives), multiple individual processes, each performing a smaller set of actions, may go <span style="color:#149414" class="has-inline-color">unnoticed</span>.<br><span style="color:#149414" class="has-inline-color">Injecting</span> the payload in multiple processes also makes cleanup difficult:  if only one affected process is terminated, the malware is capable of re-instantiating itself from another injected process. <br>The distinct malicious processes (that make up an attack) may <span style="color:#149414" class="has-inline-color">communicate</span> using traditional inter-process communication, supported by the OS, or through purposely implemented mechanisms.</li></ul>



<ul><li><strong>Windows</strong> <strong>OS</strong> <span style="color:#149414" class="has-inline-color">problems that make exploitation easier</span>: <ul><li>it does not keep a strict relation between child processes and parent processes =&gt; managing related processes for detection is more difficult, requiring OS specific knowledge</li><li>it allows code to be injected in a trivial way and does not provide a synchronous notification when injections occur =&gt; detecting all code injection methods is also considerably hard</li></ul></li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">IX.</span> How do we <span style="color:#149414" class="has-inline-color">combat</span> <span style="color:#149414" class="has-inline-color">multi-process</span> malware, though?</p>



<ul><li>represent the actions performed by each process as feature vectors, then correlate them with the actions performed by the child processes. Disadvantages: difficult to implement, does not consider code injection when correlating processes.</li><li>divide the processes into categories: <em>group creators</em> (they create other processes, not necessarily related to them), <em>group inheritors</em> and <em>unmonitored processes</em>. By <span style="color:#149414" class="has-inline-color">assigning a category / role to each process</span>, the groups of processes are much easier to identify and manage. The category of a process can be identified based on features like: the file path, the digital signature or a hash computed for the executable file. </li><li>as installers can be used as a <span style="color:#149414" class="has-inline-color">spreading mechanism</span>, when an installation starts, the solution should create a<strong><em><span style="color:#149414" class="has-inline-color"> process lineage tree</span></em></strong>, in which the root is the initial installer application. When the root or a descendant creates a new process, it should be added to the lineage tree as a child of the process that created it. This way, we can observe better the deepness and the exact activity of that installation, as it happens.</li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">X.</span> How about the <span style="color:#149414" class="has-inline-color">advanced cyberattacks &amp; cyberweapons </span><span class="has-inline-color has-medium-gray-color">detection</span>?&#8230; <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Well, as more and more people are being affected by this <span style="color:#149414" class="has-inline-color"><strong><a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/National_Security_Agency" data-type="URL" data-id="https://en.wikipedia.org/wiki/National_Security_Agency" target="_blank">NSA</a></strong>-level madness</span> <strong><span class="has-inline-color has-white-color">(</span></strong> shouldn&#8217;t come as a surprise, since some of their <em>most</em> <em>sophisticated</em> tools &amp; exploits were leaked online by <em><strong><a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/The_Shadow_Brokers" data-type="URL" data-id="https://en.wikipedia.org/wiki/The_Shadow_Brokers" target="_blank">The Shadow Brokers </a></strong></em>&#8211; but that&#8217;s a story for another time <strong><span class="has-inline-color has-white-color">)</span></strong>, we have to talk about this too.</p>



<p>These attacks are usually orchestrated by <span style="color:#149414" class="has-inline-color">Advanced Persistent Threat (</span><span style="color:#e10600" class="has-inline-color">APT</span><span style="color:#149414" class="has-inline-color">) actors</span> &#8211; highly skilled, motivated and well-funded <em>hackers</em>, with ample resources at their disposal (usually nation state sponsored, as now it is much cheaper and effective to <span class="has-inline-color has-red-color">attack</span> and <span class="has-inline-color has-red-color">spy</span> your enemies in the cyberspace).</p>



<figure class="wp-block-image alignwide size-full"><img loading="lazy" width="1000" height="725" src="/wp-content/uploads/2021/10/activity-actor-ramp-diagram.png" alt="" class="wp-image-220" srcset="/wp-content/uploads/2021/10/activity-actor-ramp-diagram.png 1000w, /wp-content/uploads/2021/10/activity-actor-ramp-diagram-300x218.png 300w, /wp-content/uploads/2021/10/activity-actor-ramp-diagram-768x557.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /><figcaption>APT actors &amp; their motives / targets<br><a rel="noreferrer noopener" href="https://www.secureworks.com/blog/advanced-persistent-threats-apt-a" data-type="URL" data-id="https://www.secureworks.com/blog/advanced-persistent-threats-apt-a" target="_blank">https://www.secureworks.com/blog/advanced-persistent-threats-apt-a</a></figcaption></figure>



<ul><li>APT attacks are carefully planned and often designed for a specific victim after a significant amount of time is spent researching the target => challenging to detect</li><li>some security researchers <strong>try</strong> to combat this by combining the capabilities of the behavioral security solution with the <strong><span style="color:#149414" class="has-inline-color"><a rel="noreferrer noopener" href="https://attack.mitre.org/" data-type="URL" data-id="https://attack.mitre.org/" target="_blank">MITRE ATT&amp;CK</a></span></strong> knowledge base of <span style="color:#149414" class="has-inline-color">adversary tactics</span> <span style="color:#149414" class="has-inline-color">and techniques</span>,  which are classified in 14 categories:</li></ul>



<ol class="has-eighty-black-background-color has-background has-normal-font-size"><li><kbd><em><span style="color:#149414" class="has-inline-color">Reconnaissance</span></em> - gather critical information to plan future operations</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Resource Development</span></em> - create/purchase/compromise/steal resources that can be used to support operations</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Initial Access</span></em> - get into the target network</kbd> </li><li><kbd><em><span style="color:#149414" class="has-inline-color">Execution</span> - </em>run malicious code</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Persistence</span></em> - maintain your access</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Privilege Escalation</span></em> - get higher-level permissions</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Defense Evasion</span></em> - avoid being detected</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Credential Access</span></em> - steal account names and passwords</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Discovery</span></em> - figure out &amp; map the environment you're in</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Lateral Movement</span></em> - move through the environment</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Collection</span></em> - gather data of interest to your goal</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Command and Control</span></em> - communicate with &amp; control compromised systems</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Exfiltration</span></em> - steal sensitive data</kbd></li><li><kbd><em><span style="color:#149414" class="has-inline-color">Impact</span></em> - manipulate and/or destroy the systems and data</kbd></li></ol>



<ul><li>these tactics also represent <span style="color:#149414" class="has-inline-color">reasons</span> for malware to perform certain actions. Moreover, each category is broken-down into multiple techniques and sub-techniques that indicate how a tactical goal is achieved.</li></ul>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-large-font-size"><span style="color:#901a1a" class="has-inline-color">Conclusion</span></p>



<p>To wrap up, there are two serious <span style="color:#149414" class="has-inline-color">problems</span> that always seem to <strong><span style="color:#149414" class="has-inline-color">haunt</span></strong> the defense professionals: the <strong><span style="color:#149414" class="has-inline-color">time gap</span></strong> between the moment a new malware is released, until a behavioral model is available for that malware type (as systems are exposed to attacks), and the<strong> <span style="color:#149414" class="has-inline-color">sophisticated cyberattacks</span></strong> (<span class="has-inline-color has-red-color">APT</span>&#8216;s specialty), which are particularly difficult to detect and they are often discovered when it&#8217;s already <span style="color:#149414" class="has-inline-color">too late</span>. Thus, there&#8217;s still an acute need for proactive behavioral detection solutions with fast response capabilities.</p>



<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-text-align-center has-extra-small-font-size">Publications used for this article:<br><em>Sushil Kumar et al. An emerging threat fileless malware: a survey and research challenges, 2020<br>Steve Mansfield-Devine. The malware arms race. Computer Fraud &amp; Security, 2018<br>Jaime Devesa, Igor Santos, Xabier Cantero, Yoseba K. Penya, and Pablo Garcia Bringas. Automatic behaviour-based analysis and classification system for malware detection, 2010<br>Romanch Agarwal, Prabhat Kumar Singh, Nitin Jyoti, Harinath Ramachetty Vishwanath, and Palasamudram Ramagopal Prashanth. System and method for non-signature based detection of malicious processes, 2016<br>Ishai Rosenberg and Ehud Gudes. Bypassing system calls based intrusion detection systems, 2017<br>Weiqin Ma, Pu Duan, Sanmin Liu, Guofei Gu, and Jyh-Charn Liu. Shadow attacks: automatically evading system-call-behavior based malware detection, 2012<br>Jithin Pavithran, Milan Patnaik, and Chester Rebeiro. D-time: distributed threadless independent malware execution for runtime obfuscation, 2019<br>Gheorghe Hajmasan, Alexandra Mondoc, and Octavian Cret. Dynamic behavior evaluation for malware detection. In 2017 5th International Symposium on Digital Forensic and Security (ISDFS), Tirgu Mures, 2017<br>Gheorghe Hajmasan, Alexandra Mondoc, Radu Portase, and Octavian Cret. Evasive Malware Detection Using Groups of Processes, 2017<br>Gheorghe Hajmasan, Radu Portase. Systems and methods for tracking malicious behavior across multiple software entities, 2020<br>Sandor Lukacs, Raul Tosa, Paul Boca, Gheorghe Hajmasan, Andrei Lutas. Complex scoring for malware detection, 2016<br>Sandor Lukacs, Raul Tosa, Paul Boca, Gheorghe Hajmasan, Andrei Lutas. Process evaluation for malware detection in virtual machines, 2015<br>Bill Blunden. The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System, 2009</em><br><br></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>SQL Injections showcase</title>
		<link>/2021/10/06/sql-injections-showcase/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Wed, 06 Oct 2021 20:43:49 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<category><![CDATA[#badstore]]></category>
		<category><![CDATA[#cybersecurity]]></category>
		<category><![CDATA[#hack]]></category>
		<category><![CDATA[#loginbypass]]></category>
		<category><![CDATA[#SQLinjection]]></category>
		<category><![CDATA[#webvulnerability]]></category>
		<category><![CDATA[vulnerability]]></category>
		<guid isPermaLink="false">/?p=137</guid>

					<description><![CDATA[This is my winning solution for a faculty SQL Injection contest I participated in 2021. The main challenge was to<p><a href="/2021/10/06/sql-injections-showcase/" class="more-link">Continue reading<span class="screen-reader-text">SQL Injections showcase</span></a></p>]]></description>
										<content:encoded><![CDATA[
<p>This is my winning solution for a faculty <span style="color:#149414" class="has-inline-color"><em>SQL Injection</em> contest</span> I participated in 2021.</p>



<p>The main challenge was to find <em>inventive and playful</em> ways to <span style="color:#149414" class="has-inline-color">exploit</span> database connected applications that are <span style="color:#149414" class="has-inline-color">vulnerable</span> to this kind of attack. </p>



<p>Therefore, I used two applications: <a rel="noreferrer noopener" href="https://github.com/StefanCsPurge/Web-Programming/tree/main/9%20SHCarsWebsite_-_Angular_ASP_NET_API" data-type="URL" data-id="https://github.com/StefanCsPurge/Web-Programming/tree/main/9%20SHCarsWebsite_-_Angular_ASP_NET_API" target="_blank">one that was entirely coded by me</a>, and the other being a vulnerable webservice hosted on a Linux server. It was fun <span style="color:#149414" class="has-inline-color">( ͡° ͜ʖ ͡°)</span> .</p>



<p>Below is the complete description of the exploitation process / write-up.</p>



<figure class="wp-block-image alignwide size-large"><img loading="lazy" width="791" height="1024" src="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001-791x1024.jpg" alt="" class="wp-image-151" srcset="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001-791x1024.jpg 791w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001-232x300.jpg 232w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001-768x994.jpg 768w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001-1187x1536.jpg 1187w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0001.jpg 1275w" sizes="(max-width: 791px) 100vw, 791px" /></figure>



<figure class="wp-block-image alignwide size-large"><img loading="lazy" width="791" height="1024" src="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002-791x1024.jpg" alt="" class="wp-image-152" srcset="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002-791x1024.jpg 791w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002-232x300.jpg 232w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002-768x994.jpg 768w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002-1187x1536.jpg 1187w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0002.jpg 1275w" sizes="(max-width: 791px) 100vw, 791px" /></figure>



<figure class="wp-block-image alignwide size-large"><img loading="lazy" width="791" height="1024" src="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003-791x1024.jpg" alt="" class="wp-image-153" srcset="/wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003-791x1024.jpg 791w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003-232x300.jpg 232w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003-768x994.jpg 768w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003-1187x1536.jpg 1187w, /wp-content/uploads/2021/10/completeDescriptionSQLInj_page-0003.jpg 1275w" sizes="(max-width: 791px) 100vw, 791px" /></figure>



<figure class="wp-block-image alignwide size-large"><img loading="lazy" width="1024" height="678" src="/wp-content/uploads/2021/10/ALL_DB_schema-1024x678.png" alt="" class="wp-image-147" srcset="/wp-content/uploads/2021/10/ALL_DB_schema-1024x678.png 1024w, /wp-content/uploads/2021/10/ALL_DB_schema-300x199.png 300w, /wp-content/uploads/2021/10/ALL_DB_schema-768x508.png 768w, /wp-content/uploads/2021/10/ALL_DB_schema.png 1511w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>DB schema</figcaption></figure>



<p>The Github repo for this solution can be found <a href="https://github.com/StefanCsPurge/Databases/tree/main/SQL%20Injections%20showcase" data-type="URL" data-id="https://github.com/StefanCsPurge/Databases/tree/main/SQL%20Injections%20showcase" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>The above PDF and video demo can be found <a href="https://drive.google.com/drive/folders/1svT-g4Nj4H5FY8-KSorNLEh5p0738txr" data-type="URL" data-id="https://drive.google.com/drive/folders/1svT-g4Nj4H5FY8-KSorNLEh5p0738txr" target="_blank" rel="noreferrer noopener">here</a>. </p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Recent history the world deserves to know</title>
		<link>/2021/10/03/hello-world/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Sun, 03 Oct 2021 16:27:40 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<guid isPermaLink="false">/?p=1</guid>

					<description><![CDATA[The book &#8220;This Is How They Tell Me the World Ends&#8221; by Nicole Perlroth contains valuable information about all the<p><a href="/2021/10/03/hello-world/" class="more-link">Continue reading<span class="screen-reader-text">Recent history the world deserves to know</span></a></p>]]></description>
										<content:encoded><![CDATA[
<p>The book &#8220;<em><strong>This Is How They Tell Me the World Ends</strong></em>&#8221; by <strong>Nicole Perlroth</strong> contains valuable information about all the important events in the world of cyber warfare internationally.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="674" height="1024" src="/wp-content/uploads/2021/10/91YHYvJdgxL-674x1024.jpg" alt="" class="wp-image-80" srcset="/wp-content/uploads/2021/10/91YHYvJdgxL-674x1024.jpg 674w, /wp-content/uploads/2021/10/91YHYvJdgxL-197x300.jpg 197w, /wp-content/uploads/2021/10/91YHYvJdgxL-768x1168.jpg 768w, /wp-content/uploads/2021/10/91YHYvJdgxL-1010x1536.jpg 1010w, /wp-content/uploads/2021/10/91YHYvJdgxL-1347x2048.jpg 1347w, /wp-content/uploads/2021/10/91YHYvJdgxL.jpg 1684w" sizes="(max-width: 674px) 100vw, 674px" /><figcaption>https://www.amazon.com/This-They-Tell-World-Ends/dp/1635576059</figcaption></figure>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
