<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>#webvulnerability &#8211; M. Ștefan Cristian</title>
	<atom:link href="/tag/webvulnerability/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Technology &#38; Information Security Enthusiast</description>
	<lastBuildDate>Wed, 06 Oct 2021 20:47:11 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>

<image>
	<url>/wp-content/uploads/2021/10/icon.png</url>
	<title>#webvulnerability &#8211; M. Ștefan Cristian</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>SQL Injections showcase</title>
		<link>/2021/10/06/sql-injections-showcase/</link>
		
		<dc:creator><![CDATA[spurge]]></dc:creator>
		<pubDate>Wed, 06 Oct 2021 20:43:49 +0000</pubDate>
				<category><![CDATA[Information security]]></category>
		<category><![CDATA[#badstore]]></category>
		<category><![CDATA[#cybersecurity]]></category>
		<category><![CDATA[#hack]]></category>
		<category><![CDATA[#loginbypass]]></category>
		<category><![CDATA[#SQLinjection]]></category>
		<category><![CDATA[#webvulnerability]]></category>
		<category><![CDATA[vulnerability]]></category>
		<guid isPermaLink="false">/?p=137</guid>

					<description><![CDATA[This is my winning solution for a faculty SQL Injection contest I participated in 2021. The main challenge was to<p><a href="/2021/10/06/sql-injections-showcase/" class="more-link">Continue reading<span class="screen-reader-text">SQL Injections showcase</span></a></p>]]></description>
										<content:encoded><![CDATA[
<p>This is my winning solution for a faculty <span style="color:#149414" class="has-inline-color"><em>SQL Injection</em> contest</span> I participated in 2021.</p>



<p>The main challenge was to find <em>inventive and playful</em> ways to <span style="color:#149414" class="has-inline-color">exploit</span> database connected applications that are <span style="color:#149414" class="has-inline-color">vulnerable</span> to this kind of attack. </p>



<p>Therefore, I used two applications: <a rel="noreferrer noopener" href="https://github.com/StefanCsPurge/Web-Programming/tree/main/9%20SHCarsWebsite_-_Angular_ASP_NET_API" data-type="URL" data-id="https://github.com/StefanCsPurge/Web-Programming/tree/main/9%20SHCarsWebsite_-_Angular_ASP_NET_API" target="_blank">one that was entirely coded by me</a>, and the other being a vulnerable webservice hosted on a Linux server. It was fun <span style="color:#149414" class="has-inline-color">( ͡° ͜ʖ ͡°)</span> .</p>



<p>Below is the complete description of the exploitation process / write-up.</p>


<a href="/wp-content/uploads/2021/10/completeDescriptionSQLInj.pdf" class="pdfemb-viewer" style="" data-width="max" data-height="max"  data-toolbar="bottom" data-toolbar-fixed="on">completeDescriptionSQLInj<br/></a>
<p class="wp-block-pdfemb-pdf-embedder-viewer"></p>



<p>The Github repo for this solution can be found <a href="https://github.com/StefanCsPurge/Databases/tree/main/SQL%20Injections%20showcase" data-type="URL" data-id="https://github.com/StefanCsPurge/Databases/tree/main/SQL%20Injections%20showcase" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>The above PDF and video demo can be found <a href="https://drive.google.com/drive/folders/1svT-g4Nj4H5FY8-KSorNLEh5p0738txr" data-type="URL" data-id="https://drive.google.com/drive/folders/1svT-g4Nj4H5FY8-KSorNLEh5p0738txr" target="_blank" rel="noreferrer noopener">here</a>. </p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
